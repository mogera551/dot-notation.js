const e="*",t="dot-notation",a={directlyGet:Symbol.for(t+".direct_get"),directlySet:Symbol.for(t+".direct_set"),isSupportDotNotation:Symbol.for(t+".is_support_dot_notation")},s=new RegExp(/^\$([0-9]+)$/);class r{name;pathNames=[];parentPathNames=[];parentPath;parentPaths=[];setOfParentPaths;regexp;level=0;isPrimitive;constructor(t){this.name=t,this.pathNames=t.split("."),this.parentPathNames=this.pathNames.slice(0,-1),this.parentPaths=this.parentPathNames.reduce(((e,t)=>(e.push(e.at(-1)?.concat(t)??[t]),e)),[]).map((e=>e.join("."))),this.setOfParentPaths=new Set(this.parentPaths),this.parentPath=this.parentPathNames.join("."),this.lastPathName=this.pathNames.at(-1),this.regexp=new RegExp("^"+t.replaceAll(".","\\.").replaceAll("*","([0-9a-zA-Z_]*)")+"$"),this.level=this.pathNames.filter((t=>t===e)).length,this.isPrimitive=1===this.pathNames.length}findNearestWildcard(){return r.findNearestWildcard(this)}static findNearestWildcard(t){return t.lastPathName===e?t:""!==t.parentPath?this.findNearestWildcard(r.create(t.parentPath)):void 0}static create(e){const t=this.propertyNameByName.get(e);if(t)return t;const a=new r(e);return this.propertyNameByName.set(e,a),a}static propertyNameByName=new Map;static parse(e){const t=[],a=[];for(const s of e.split(".")){const e=Number(s);isNaN(e)?a.push(s):(t.push(e),a.push("*"))}return{propName:r.create(a.join(".")),indexes:t}}}class n{#e=[];#t=new Map;get lastIndexes(){return this.#e[this.#e.length-1]}get stackIndexes(){return this.#e}get matchByName(){return this.#t}getByPropertyName(t,{propName:a},s){let n;if(Reflect.has(t,a.name))n=Reflect.get(t,a.name,s);else if(""!==a.parentPath){const i=r.create(a.parentPath),h=this.getByPropertyName(t,{propName:i},s);if(void 0!==h){const t=a.lastPathName===e?this.lastIndexes[a.level-1]:a.lastPathName;n=Reflect.get(h,t)}}return n}setByPropertyName(t,{propName:a,value:s},n){let i=!1;if(Reflect.has(t,a.name)||a.isPrimitive)i=Reflect.set(t,a.name,s,n);else{const h=r.create(a.parentPath),p=this.getByPropertyName(t,{propName:h},n);if(void 0!==p){const t=a.lastPathName===e?this.lastIndexes[a.level-1]:a.lastPathName;i=Reflect.set(p,t,s)}}return i}pushIndexes(e,t){this.#e.push(e);try{return Reflect.apply(t,this,[])}finally{this.#e.pop()}}getFunc=(e,t)=>({propName:a,indexes:s})=>this.pushIndexes(s,(()=>this.getByPropertyName(e,{propName:a},t)));setFunc=(e,t)=>({propName:a,indexes:s},r)=>this.pushIndexes(s,(()=>this.setByPropertyName(e,{propName:a,value:r},t)));getExpandLastLevel(e,{propName:t,indexes:a},s){const n=this.getFunc(e,s),i=t.findNearestWildcard();if(!i)throw new Error(`not found wildcard path of '${t.name}'`);const h=r.create(i.parentPath);return n({propName:h,indexes:a}).map(((e,s)=>n({propName:t,indexes:a.concat(s)})))}setExpandLastLevel(e,{propName:t,indexes:a,values:s},n){const i=this.getFunc(e,n),h=this.setFunc(e,n),p=t.findNearestWildcard();if(!p)throw new Error(`not found wildcard path of '${t.name}'`);const o=r.create(p.parentPath),l=i({propName:o,indexes:a});if(p.name===t.name)h({propName:o,indexes:a},s);else{if(s.length!==l.length)throw new Error(`not match value count '${t.name}'`);for(let e in l)h({propName:t,indexes:a.concat(Number(e))},s[e])}return!0}get(e,t,n){const i=this.getFunc(e,n),h=this.lastIndexes;let p;if(t===a.directlyGet)return(t,a)=>this.pushIndexes(a,(()=>this.getByPropertyName(e,{propName:r.create(t)},n)));if(t===a.directlySet)return(t,a,s)=>this.pushIndexes(a,(()=>this.setByPropertyName(e,{propName:r.create(t),value:s},n)));if(t===a.isSupportDotNotation)return!0;if(p=s.exec(t))return h?.[Number(p[1])-1]??void 0;if("@"===t.at(0)){const a=t.slice(1),s=r.create(a);if((h?.length??0)+1<s.level)throw new Error("array level not match");const i=h?.slice(0,s.level-1)??[];return this.getExpandLastLevel(e,{propName:s,indexes:i},n)}if(this.#t.has(t))return i(this.#t.get(t));const o=r.parse(t);return o.propName.level===o.indexes.length&&this.#t.set(t,o),o.indexes.push(...h?.slice(o.indexes.length)??[]),i(o)}set(e,t,a,s){const n=this.setFunc(e,s),i=this.lastIndexes;if("@"===t.at(0)){const n=t.slice(1),i=r.create(n);if((this.lastIndexes?.length??0)+1<i.level)throw new Error("array level not match");const h=this.lastIndexes?.slice(0,i.level-1)??[];return this.setExpandLastLevel(e,{propName:i,indexes:h,values:a},s)}if(this.#t.has(t))return n(this.#t.get(t),a);const h=r.parse(t);return h.propName.level===h.indexes.length&&this.#t.set(t,h),this.#t.set(t,h),h.indexes.push(...i?.slice(h.indexes.length)??[]),n(h,a)}}export{n as Handler,r as PropertyName,s as RE_CONTEXT_INDEX,a as Symbols};
